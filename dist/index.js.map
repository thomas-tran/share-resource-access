{"version":3,"file":"index.js","sources":["../src/token-generator.ts"],"sourcesContent":["import utf8 from 'utf8';\nimport createHmac from 'create-hmac';\nimport querystring from 'querystring';\n/**\n * Permission types\n */\nexport type Permissions = 'r' | 'w' | 'd'; // READ, WRITE, DELETE\n\n/**\n * TokenGenerator class\n */\nexport class TokenGenerator {\n  /**\n   * Create the share resource access token\n   * @param uri - the resource uri\n   * @param permissions - the array of permissions\n   * @param startTime - the start time in unix timestamp\n   * @param expiryTime - the expiry time in unix timestamp\n   * @param clientIps - the optional client ips in comma seperate e.g. 192.168.0.1, 192.168.0.2\n   * @param key - the secret key to sign\n   * @returns - the share resource token\n   */\n  public static create(\n    uri: string,\n    permissions: Permissions[],\n    startTime: number,\n    expiryTime: number,\n    clientIps: string,\n    key: string,\n  ): string {\n    if (!uri || !key || !startTime || !expiryTime) {\n      throw new Error('Missing required parameter');\n    }\n\n    const encoded = encodeURIComponent(uri);\n\n    const payload = {\n      rs_uri: uri,\n      ap: permissions.join(''),\n      st: startTime.toString(),\n      et: expiryTime.toString(),\n      ip: clientIps,\n    };\n\n    const payloadEncoded = utf8.encode(JSON.stringify(payload));\n\n    // sign with the secret key\n    const hash = createHmac('sha256', key)\n      .update(payloadEncoded)\n      .digest('base64');\n\n    return `rs_uri=${encoded}&ap=${permissions.join(\n      '',\n    )}&st=${startTime}&et=${expiryTime}&ip=${clientIps}&sig=${encodeURIComponent(\n      hash,\n    )}`;\n  }\n\n  /**\n   *\n   * @param token the shared resource access token\n   * @param key the key to verify the token\n   * @returns true if the token is valid, otherwise returns false\n   */\n  public static verify(token: string, key: string): boolean {\n    const payload = querystring.parse(token);\n\n    const sig = payload.sig;\n\n    // remove the signature from payload\n    delete payload.sig;\n\n    const payloadEncoded = utf8.encode(JSON.stringify(payload));\n\n    const hash = createHmac('sha256', key)\n      .update(payloadEncoded)\n      .digest('base64');\n\n    return sig === hash;\n  }\n}\n"],"names":["utf8","createHmac","querystring"],"mappings":";;;;;;;;;;;;;;;;;;;;AAQA;;;;IAGA;KAqEC;;;;;;;;;;;IA1De,qBAAM,GAApB,UACE,GAAW,EACX,WAA0B,EAC1B,SAAiB,EACjB,UAAkB,EAClB,SAAiB,EACjB,GAAW;QAEX,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,UAAU,EAAE;YAC7C,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QAED,IAAM,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAExC,IAAM,OAAO,GAAG;YACd,MAAM,EAAE,GAAG;YACX,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;YACxB,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE;YACxB,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE;YACzB,EAAE,EAAE,SAAS;SACd,CAAC;QAEF,IAAM,cAAc,GAAGA,wBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;;QAG5D,IAAM,IAAI,GAAGC,8BAAU,CAAC,QAAQ,EAAE,GAAG,CAAC;aACnC,MAAM,CAAC,cAAc,CAAC;aACtB,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEpB,OAAO,YAAU,OAAO,YAAO,WAAW,CAAC,IAAI,CAC7C,EAAE,CACH,YAAO,SAAS,YAAO,UAAU,YAAO,SAAS,aAAQ,kBAAkB,CAC1E,IAAI,CACH,CAAC;KACL;;;;;;;IAQa,qBAAM,GAApB,UAAqB,KAAa,EAAE,GAAW;QAC7C,IAAM,OAAO,GAAGC,+BAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;;QAGxB,OAAO,OAAO,CAAC,GAAG,CAAC;QAEnB,IAAM,cAAc,GAAGF,wBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAE5D,IAAM,IAAI,GAAGC,8BAAU,CAAC,QAAQ,EAAE,GAAG,CAAC;aACnC,MAAM,CAAC,cAAc,CAAC;aACtB,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEpB,OAAO,GAAG,KAAK,IAAI,CAAC;KACrB;IACH,qBAAC;AAAD,CAAC;;;;"}