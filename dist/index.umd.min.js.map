{"version":3,"file":"index.umd.min.js","sources":["../src/token-generator.ts"],"sourcesContent":["import utf8 from 'utf8';\nimport createHmac from 'create-hmac';\nimport querystring from 'querystring';\n/**\n * Permission types\n */\nexport type Permissions = 'r' | 'w' | 'd'; // READ, WRITE, DELETE\n\n/**\n * TokenGenerator class\n */\nexport class TokenGenerator {\n  /**\n   * Create the share resource access token\n   * @param uri - the resource uri\n   * @param permissions - the array of permissions\n   * @param startTime - the start time in unix timestamp\n   * @param expiryTime - the expiry time in unix timestamp\n   * @param clientIps - the optional client ips in comma seperate e.g. 192.168.0.1, 192.168.0.2\n   * @param key - the secret key to sign\n   * @returns - the share resource token\n   */\n  public static create(\n    uri: string,\n    permissions: Permissions[],\n    startTime: number,\n    expiryTime: number,\n    clientIps: string,\n    key: string,\n  ): string {\n    if (!uri || !key || !startTime || !expiryTime) {\n      throw new Error('Missing required parameter');\n    }\n\n    const encoded = encodeURIComponent(uri);\n\n    const payload = {\n      rs_uri: uri,\n      ap: permissions.join(''),\n      st: startTime.toString(),\n      et: expiryTime.toString(),\n      ip: clientIps,\n    };\n\n    const payloadEncoded = utf8.encode(JSON.stringify(payload));\n\n    // sign with the secret key\n    const hash = createHmac('sha256', key)\n      .update(payloadEncoded)\n      .digest('base64');\n\n    return `rs_uri=${encoded}&ap=${permissions.join(\n      '',\n    )}&st=${startTime}&et=${expiryTime}&ip=${clientIps}&sig=${encodeURIComponent(\n      hash,\n    )}`;\n  }\n\n  /**\n   *\n   * @param token the shared resource access token\n   * @param key the key to verify the token\n   * @returns true if the token is valid, otherwise returns false\n   */\n  public static verify(token: string, key: string): boolean {\n    const payload = querystring.parse(token);\n\n    const sig = payload.sig;\n\n    // remove the signature from payload\n    delete payload.sig;\n\n    const payloadEncoded = utf8.encode(JSON.stringify(payload));\n\n    const hash = createHmac('sha256', key)\n      .update(payloadEncoded)\n      .digest('base64');\n\n    return sig === hash;\n  }\n}\n"],"names":["TokenGenerator","uri","permissions","startTime","expiryTime","clientIps","key","Error","encoded","encodeURIComponent","payload","rs_uri","ap","join","st","toString","et","ip","payloadEncoded","utf8","encode","JSON","stringify","hash","createHmac","update","digest","token","querystring","parse","sig"],"mappings":";;;;;wfAWA,cAqEA,OA1DgBA,SAAd,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,KAAKL,GAAQK,GAAQH,GAAcC,GACjC,MAAM,IAAIG,MAAM,8BAGlB,IAAMC,EAAUC,mBAAmBR,GAE7BS,EAAU,CACdC,OAAQV,EACRW,GAAIV,EAAYW,KAAK,IACrBC,GAAIX,EAAUY,WACdC,GAAIZ,EAAWW,WACfE,GAAIZ,GAGAa,EAAiBC,UAAKC,OAAOC,KAAKC,UAAUZ,IAG5Ca,EAAOC,UAAW,SAAUlB,GAC/BmB,OAAOP,GACPQ,OAAO,UAEV,MAAO,UAAUlB,SAAcN,EAAYW,KACzC,WACMV,SAAgBC,SAAiBC,UAAiBI,mBACxDc,IAUUvB,SAAd,SAAqB2B,EAAerB,GAClC,IAAMI,EAAUkB,UAAYC,MAAMF,GAE5BG,EAAMpB,EAAQoB,WAGbpB,EAAQoB,IAEf,IAAMZ,EAAiBC,UAAKC,OAAOC,KAAKC,UAAUZ,IAMlD,OAAOoB,IAJMN,UAAW,SAAUlB,GAC/BmB,OAAOP,GACPQ,OAAO"}